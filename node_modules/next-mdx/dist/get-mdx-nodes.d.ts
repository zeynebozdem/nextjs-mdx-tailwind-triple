/// <reference types="node" />
import { MdxRemote } from "next-mdx-remote/types";
import { GetStaticPropsContext } from "next";
import { Pluggable, Compiler } from "unified";
import { Node } from "./get-nodes";
export interface MdxNode<T = Record<string, unknown>> extends Node<T> {
    mdx: MdxRemote.Source;
}
export interface MdxParams {
    components?: MdxRemote.Components;
    scope?: Record<string, unknown>;
    provider?: MdxRemote.Provider;
    mdxOptions?: {
        remarkPlugins?: Pluggable[];
        rehypePlugins?: Pluggable[];
        hastPlugins?: Pluggable[];
        compilers?: Compiler[];
        filepath?: string;
    };
}
export interface getAllMdxNodesParams extends MdxParams {
    sortBy?: string;
    sortOrder?: "asc" | "desc";
}
export declare function getMdxNode<T extends MdxNode>(sourceName: string, context: string | GetStaticPropsContext<NodeJS.Dict<string[]>>, params?: MdxParams): Promise<T>;
export declare function getAllMdxNodes<T extends MdxNode>(sourceName: string, params?: getAllMdxNodesParams): Promise<T[]>;
