{"version":3,"file":"server.js","sources":["../src/get-cache.ts","../src/get-config.ts","../src/get-files.ts","../src/get-nodes.ts","../src/get-mdx-paths.ts"],"sourcesContent":["import NodeCache from \"node-cache\"\n\nexport const mdxCache = new NodeCache()\n","import { promises as fs } from \"fs\"\nimport path from \"path\"\n\nconst DEFAULT_CONFIG_PATH = \"next-mdx.json\"\n\nexport interface SourceConfig {\n  contentPath: string\n  basePath?: string\n  sortBy?: string\n  sortOrder?: \"asc\" | \"desc\"\n}\n\nexport interface Config {\n  [key: string]: SourceConfig\n}\n\nexport async function getConfig(): Promise<Config> {\n  const configPath = path.resolve(`${process.cwd()}/${DEFAULT_CONFIG_PATH}`)\n\n  try {\n    // TODO: Figure out dynamic import.\n    // Switch to next-mdx.config.js?\n    const json = await fs.readFile(configPath, \"utf-8\")\n    return JSON.parse(json)\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport async function getSourceConfig(source: string): Promise<SourceConfig> {\n  const config = await getConfig()\n\n  if (!config || !config[source]) {\n    throw new Error(`Type ${source} does not exist in ${DEFAULT_CONFIG_PATH}`)\n  }\n\n  return {\n    sortBy: \"title\",\n    sortOrder: \"asc\",\n    ...config[source],\n  }\n}\n","import glob from \"fast-glob\"\nimport path from \"path\"\n\nimport { getSourceConfig } from \"./get-config\"\n\nexport interface MdxFile {\n  filepath: string\n  slug: string\n  url?: string\n}\n\nexport async function getFiles(sourceName: string): Promise<MdxFile[]> {\n  const { contentPath, basePath } = await getSourceConfig(sourceName)\n  const files = await glob(`${contentPath}/**/*.{md,mdx}`)\n\n  if (!files.length) return []\n\n  return files.map((filepath) => {\n    let slug = filepath\n      .replace(contentPath, \"\")\n      .replace(/^\\/+/, \"\")\n      .replace(new RegExp(path.extname(filepath) + \"$\"), \"\")\n\n    slug = slug.replace(/\\/?index$/, \"\")\n\n    return {\n      filepath,\n      slug,\n      url: basePath ? `${basePath.replace(/\\/$/, \"\")}/${slug}` : null,\n    }\n  })\n}\n","import { promises as fs } from \"fs\"\nimport matter from \"gray-matter\"\nimport hasha from \"hasha\"\nimport { GetStaticPropsContext } from \"next\"\nimport { Pluggable, Compiler } from \"unified\"\nimport renderToString from \"next-mdx-remote/render-to-string\"\nimport { MdxRemote } from \"next-mdx-remote/types\"\n\nimport { mdxCache } from \"./get-cache\"\nimport { getFiles, MdxFile } from \"./get-files\"\nimport { getConfig, getSourceConfig } from \"./get-config\"\n\nexport type NodeFrontMatter = Record<string, unknown>\n\n// TODO: Properly type node relationships with generics.\nexport interface NodeRelationships<T = Node> {\n  [key: string]: T[]\n}\n\nexport interface Node<T = NodeFrontMatter> extends MdxFile, MdxFileData<T> {\n  mdx: MdxRemote.Source\n  relationships?: NodeRelationships\n}\n\n// type MdxNodeWithoutMdx<T extends Node> = Omit<T, \"mdx\">\n\nexport interface MdxNode<T = NodeFrontMatter> extends Node<T> {}\n\nexport interface MdxParams {\n  components?: MdxRemote.Components\n  scope?: Record<string, unknown>\n  provider?: MdxRemote.Provider\n  mdxOptions?: {\n    remarkPlugins?: Pluggable[]\n    rehypePlugins?: Pluggable[]\n    hastPlugins?: Pluggable[]\n    compilers?: Compiler[]\n    filepath?: string\n  }\n}\n\nexport interface getAllMdxNodesParams extends MdxParams {\n  sortBy?: string\n  sortOrder?: \"asc\" | \"desc\"\n}\n\nexport interface MdxFileData<T = NodeFrontMatter> {\n  hash: string\n  frontMatter?: T\n  content?: string\n}\n\nexport async function getMdxNode<T extends MdxNode>(\n  sourceName: string,\n  context: string | GetStaticPropsContext<NodeJS.Dict<string[]>>,\n  params?: MdxParams\n): Promise<T> {\n  if (!context || (typeof context !== \"string\" && !context.params?.slug)) {\n    new Error(`slug params missing from context`)\n  }\n\n  const node = await getNode(sourceName, context)\n\n  if (!node) return null\n\n  return <T>{\n    ...node,\n    mdx: await renderNodeMdx(node, params),\n  }\n}\n\nexport async function getAllMdxNodes<T extends MdxNode>(\n  sourceName: string,\n  params?: getAllMdxNodesParams\n): Promise<T[]> {\n  const nodes = await getAllNodes(sourceName)\n\n  if (!nodes.length) return []\n\n  return Promise.all<T>(\n    nodes.map(\n      async (node) =>\n        <T>{\n          ...node,\n          mdx: await renderNodeMdx(node, params),\n        }\n    )\n  )\n}\n\nasync function renderNodeMdx(node: Node, params?: MdxParams) {\n  return await renderToString(node.content, {\n    ...params,\n    scope: {\n      ...params?.scope,\n      ...node.frontMatter,\n    },\n  })\n}\n\nexport async function getNode<T extends Node>(\n  sourceName: string,\n  context: string | GetStaticPropsContext<NodeJS.Dict<string[]>>\n): Promise<T> {\n  const files = await getFiles(sourceName)\n\n  if (!files.length) return null\n\n  const slug =\n    typeof context === \"string\"\n      ? context\n      : context.params.slug\n      ? context.params.slug.join(\"/\")\n      : \"\"\n\n  const [file] = files.filter((file) => file.slug === slug)\n\n  if (!file) return null\n\n  const node = await buildNodeFromFile(file)\n\n  return <T>{\n    ...node,\n    relationships: await getNodeRelationships(node),\n  }\n}\n\nexport async function getAllNodes<T extends Node>(\n  sourceName: string\n): Promise<T[]> {\n  const { sortBy, sortOrder } = await getSourceConfig(sourceName)\n\n  const files = await getFiles(sourceName)\n\n  if (!files.length) return []\n\n  const nodes = await Promise.all<T>(\n    files.map(async (file) => {\n      const node = await buildNodeFromFile(file)\n\n      return <T>{\n        ...node,\n        relationships: await getNodeRelationships(node),\n      }\n    })\n  )\n\n  const adjust = sortOrder === \"desc\" ? -1 : 1\n  return <T[]>nodes.sort((a, b) => {\n    if (a.frontMatter[sortBy] < b.frontMatter[sortBy]) {\n      return -1 * adjust\n    }\n    if (a.frontMatter[sortBy] > b.frontMatter[sortBy]) {\n      return 1 * adjust\n    }\n    return 0\n  })\n}\n\nasync function buildNodeFromFile<T extends Node>(file: MdxFile): Promise<T> {\n  return <T>{\n    ...file,\n    ...(await getFileData(file)),\n    mdx: {\n      compiledSource: \"\",\n      renderedOutput: \"\",\n    },\n  }\n}\n\nexport async function getFileData(file: MdxFile): Promise<MdxFileData> {\n  const raw = await fs.readFile(file.filepath, \"utf-8\")\n  const hash = hasha(raw.toString())\n\n  const cachedContent = mdxCache.get<MdxFileData>(hash)\n  if (cachedContent?.hash === hash) {\n    // console.info(`HIT for ${file.slug}`)\n    return cachedContent\n  }\n\n  // console.info(`MISS for ${file.slug}`)\n\n  const { content, data: frontMatter } = matter(raw)\n\n  const fileData: MdxFileData = {\n    hash,\n    content,\n    frontMatter,\n  }\n\n  mdxCache.set<MdxFileData>(hash, fileData)\n\n  return fileData\n}\n\nasync function getNodeRelationships(node: Node): Promise<NodeRelationships> {\n  const relationships: NodeRelationships = {}\n  const config = await getConfig()\n\n  for (const key of Object.keys(node.frontMatter)) {\n    if (!config[key]) continue\n\n    const values = node.frontMatter[key]\n\n    if (!values) continue\n\n    const valueAsArray: string[] = Array.isArray(values) ? values : [values]\n    relationships[key] = await Promise.all(\n      valueAsArray.map(async (value) => await getNode(key, value))\n    )\n  }\n\n  return relationships\n}\n","import { getAllNodes, Node } from \"./get-nodes\"\n\nexport interface MdxPath extends Node {\n  params: {\n    slug: string[]\n  }\n}\n\nexport async function getMdxPathsRaw(sourceName: string): Promise<MdxPath[]> {\n  const nodes = await getAllNodes(sourceName)\n\n  if (!nodes.length) return []\n\n  return await Promise.all<MdxPath>(\n    nodes.map(async (node) => {\n      return {\n        ...node,\n        params: {\n          slug: node.slug.split(\"/\"),\n        },\n      }\n    })\n  )\n}\n\nexport async function getMdxPaths(\n  sourceName: string\n): Promise<Pick<MdxPath, \"params\">[]> {\n  const paths = await getMdxPathsRaw(sourceName)\n  return paths.map(({ params }) => ({ params }))\n}\n"],"names":["mdxCache","NodeCache","DEFAULT_CONFIG_PATH","getConfig","configPath","path","resolve","process","cwd","json","fs","readFile","JSON","parse","error","console","getSourceConfig","source","config","Error","sortBy","sortOrder","getFiles","sourceName","contentPath","basePath","files","glob","length","map","filepath","slug","replace","RegExp","extname","url","getMdxNode","context","params","node","getNode","mdx","renderNodeMdx","getAllMdxNodes","nodes","getAllNodes","Promise","all","renderToString","content","scope","frontMatter","join","file","filter","buildNodeFromFile","relationships","getNodeRelationships","adjust","sort","a","b","getFileData","compiledSource","renderedOutput","raw","hash","hasha","toString","cachedContent","get","data","matter","fileData","set","key","Object","keys","values","valueAsArray","Array","isArray","value","getMdxPathsRaw","split","getMdxPaths","paths"],"mappings":"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"}