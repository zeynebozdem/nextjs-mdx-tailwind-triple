/// <reference types="node" />
import { GetStaticPropsContext } from "next";
import { Pluggable, Compiler } from "unified";
import { MdxRemote } from "next-mdx-remote/types";
import { MdxFile } from "./get-files";
export declare type NodeFrontMatter = Record<string, unknown>;
export interface NodeRelationships<T = Node> {
    [key: string]: T[];
}
export interface Node<T = NodeFrontMatter> extends MdxFile, MdxFileData<T> {
    mdx: MdxRemote.Source;
    relationships?: NodeRelationships;
}
export interface MdxNode<T = NodeFrontMatter> extends Node<T> {
}
export interface MdxParams {
    components?: MdxRemote.Components;
    scope?: Record<string, unknown>;
    provider?: MdxRemote.Provider;
    mdxOptions?: {
        remarkPlugins?: Pluggable[];
        rehypePlugins?: Pluggable[];
        hastPlugins?: Pluggable[];
        compilers?: Compiler[];
        filepath?: string;
    };
}
export interface getAllMdxNodesParams extends MdxParams {
    sortBy?: string;
    sortOrder?: "asc" | "desc";
}
export interface MdxFileData<T = NodeFrontMatter> {
    hash: string;
    frontMatter?: T;
    content?: string;
}
export declare function getMdxNode<T extends MdxNode>(sourceName: string, context: string | GetStaticPropsContext<NodeJS.Dict<string[]>>, params?: MdxParams): Promise<T>;
export declare function getAllMdxNodes<T extends MdxNode>(sourceName: string, params?: getAllMdxNodesParams): Promise<T[]>;
export declare function getNode<T extends Node>(sourceName: string, context: string | GetStaticPropsContext<NodeJS.Dict<string[]>>): Promise<T>;
export declare function getAllNodes<T extends Node>(sourceName: string): Promise<T[]>;
export declare function getFileData(file: MdxFile): Promise<MdxFileData>;
